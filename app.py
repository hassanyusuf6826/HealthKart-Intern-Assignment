# -*- coding: utf-8 -*-
"""Influencer Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IhjWD-sWdr4EkaglKzQVJq4S0e6CsAhW
"""

import streamlit as st
import pandas as pd
import plotly.express as px

# ---------------------------
# Load data with caching
# ---------------------------
@st.cache_data
def load_data():
    influencers = pd.read_csv("influencers.csv")
    posts = pd.read_csv("posts.csv")
    tracking = pd.read_csv("tracking_data.csv")
    payouts = pd.read_csv("payouts.csv")
    metrics = pd.read_csv("influencer_metrics.csv")
    return influencers, posts, tracking, payouts, metrics

influencers, posts, tracking, payouts, metrics = load_data()

# ---------------------------
# Title
# ---------------------------
st.title("üìä HealthKart Influencer Campaign Dashboard")

# ---------------------------
# Sidebar Filters
# ---------------------------
st.sidebar.header("üîç Filter Influencers")

platforms = st.sidebar.multiselect(
    "Select Platform", options=metrics["platform"].unique(), default=metrics["platform"].unique()
)
categories = st.sidebar.multiselect(
    "Select Category", options=metrics["category"].unique(), default=metrics["category"].unique()
)
genders = st.sidebar.multiselect(
    "Select Gender", options=metrics["gender"].unique(), default=metrics["gender"].unique()
)
tiers = st.sidebar.multiselect(
    "Select Influencer Tier", options=metrics["tier"].unique(), default=metrics["tier"].unique()
)

# Apply filters
filtered = metrics[
    (metrics["platform"].isin(platforms)) &
    (metrics["category"].isin(categories)) &
    (metrics["gender"].isin(genders)) &
    (metrics["tier"].isin(tiers))
]

# ---------------------------
# KPIs
# ---------------------------
st.subheader("üìà Key Metrics")
col1, col2, col3 = st.columns(3)
col1.metric("Total Revenue", f"${filtered['total_revenue'].sum():,.2f}")
col2.metric("Total Payout", f"${filtered['total_payout'].sum():,.2f}")
col3.metric("Average ROAS", f"{filtered['ROAS'].mean():.2f}")

# ---------------------------
# Influencer Table
# ---------------------------
st.markdown("### üìã Influencer Performance")
st.dataframe(
    filtered.sort_values(by="ROAS", ascending=False),
    use_container_width=True
)

# ---------------------------
# Visual 1: ROAS Distribution
# ---------------------------
st.markdown("### üìä ROAS Distribution")
fig1 = px.histogram(filtered, x="ROAS", nbins=25, title="Distribution of ROAS")
st.plotly_chart(fig1, use_container_width=True)

# ---------------------------
# Visual 2: Engagement Rate vs ROAS
# ---------------------------
st.markdown("### üí¨ Engagement Rate vs ROAS")
fig2 = px.scatter(
    filtered,
    x="engagement_rate",
    y="ROAS",
    size="follower_count",
    color="platform",
    hover_name="name",
    title="Engagement vs ROAS by Platform"
)
st.plotly_chart(fig2, use_container_width=True)

# ---------------------------
# Visual 3: Top Payout Efficiency
# ---------------------------
st.markdown("### üíµ Top 10 Payout-Efficient Influencers")
top_eff = filtered.sort_values(by="payout_efficiency", ascending=False).head(10)
fig3 = px.bar(
    top_eff,
    x="name",
    y="payout_efficiency",
    color="platform",
    title="Top 10 Influencers by Payout Efficiency"
)
st.plotly_chart(fig3, use_container_width=True)

# ---------------------------
# Download CSV
# ---------------------------
st.download_button(
    label="üì• Download Filtered Data as CSV",
    data=filtered.to_csv(index=False),
    file_name="filtered_influencer_metrics.csv",
    mime="text/csv"
)

st.caption("Built for the HealthKart Intern Assignment ¬∑ Data simulated for demo purposes.")